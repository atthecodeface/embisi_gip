#!/usr/bin/perl

#a Copyright
#  
#  This file 'create_make' copyright Gavin J Stark 2003, 2004
#  

#a Main
die "Syntax: create_make <model_list> <makefile>\n" unless ($#ARGV==1);

$model_list = @ARGV[0];
$makefile = @ARGV[1];

#a Read the descriptor list
open( desc, $model_list );
$#tests = 0;
$#asms = 0;
$#ccs = 0;
while (<desc>)
{
    chomp;
    $line = $_;
    while ($line =~ /\\$/) {
        $line =~ s/\\$//;
        $next = <desc>;
        chomp $next;
        $line = $line . " " . $next;
    }
    next if $line =~/^\s*#/;
    next if $line =~/^\s*;/;
    if ($line =~ /^asm\s+(.*)/) {
        @data = split(" ",$1);
        $dir = $data[0];
        $file = $data[1];
        $opts = $data[2];
        die "Directory and file needed for asm line in test_list (dir '$dir' file '$file')" unless (($dir ne "") and ($file ne ""));
        #print "asm '$dir' '$file' '$opts'\n";
        $asms[$#asms] = "$dir $file $opts";
        $#asms++;
    }
    if ($line =~ /^cc\s+(.*)/) {
        @data = split(" ",$1);
        $dir = $data[0];
        $file = $data[1];
        $opts = $data[2];
        die "Directory and file needed for cc line in test_list (dir '$dir' file '$file')" unless (($dir ne "") and ($file ne ""));
        #print "cc '$dir' '$file' '$opts'\n";
        $ccs[$#ccs] = "$dir $file $opts";
        $#ccs++;
    }
    if ($line =~ /^test\s+(\S*)\s+(\S*)\s+(.*)/) {
        $type = $1;
        $test = $2;
        $options = $3;
        $objs = "";
        foreach $option (split(/ /,$options)) {
            if ($option =~ /(.*):(.*)/) {
                $objs .= "$1:$2@@@";
            }
        }
        $tests[$#tests] = "$test $type $objs";
        $#tests++;
    }
}
close( desc );
$#asms--;
$#ccs--;
$#tests--;

#a Output the models makefile
open( make, ">$makefile" );
print make  "TEST_BINARIES := \\\n";
foreach $i (@tests) {
    ($test, $type, $objs) = split(/ /,$i);
    print make  "    bin/$test.$type.dmif \\\n";
    print make  "    bin/$test.$type.mif \\\n";
    print make  "    bin/$test.$type.coe \\\n";
}
print make  " \n";

foreach $asm (@asms) {
    next if ($asm=~/^\s*$/);
    ($dir, $file, $opts) = split(/ /,$asm);
    $opts =~ s/@/ /g;
    print make "obj/$dir.$file.o: src/$dir/$file.S\n";
    print make "\t\${Q}\${ARM_CC} \${ARM_AS_FLAGS} -c src/$dir/$file.S $opts -o obj/$dir.$file.o\n";
    print make "\n";
}

foreach $cc (@ccs) {
    next if ($cc=~/^\s*$/);
    ($dir, $file, $opts) = split(/ /,$cc);
    $opts =~ s/@/ /g;
    $opts = "\${ARM_CC_FLAGS}" if ($opts eq "");
    print make "obj/$dir.$file.o: src/$dir/$file.c\n";
    print make "\t\${Q}\${ARM_CC} $opts \${ARM_CC_INCLUDES} -c src/$dir/$file.c -o obj/$dir.$file.o\n";
    print make "\n";
}

foreach $i (@tests) {
    ($test, $type, $objs) = split(/ /,$i);

    print make "bin/$test.$type.bin: \\\n";
    foreach $obj (split(/@@@/,$objs)) {
        next if ($obj=~/^\s*$/);
        if ($obj=~/^([^:]*):(.*)/) {
            print make "\t\tobj/${1}.$2.o \\\n";
        }
    }
    print make "\t\tscripts/build.$type.script\n";
    print make "\t\${Q}\${ARM_LD} -T scripts/build.$type.script --Map bin/$test.$type.map -o obj/$test.$type.elf \\\n";
    foreach $obj (split(/@@@/,$objs)) {
        next if ($obj=~/^\s*$/);
        if ($obj=~/^([^:]*):(.*)/) {
            print make "\t\t\tobj/$1.$2.o \\\n";
        }
    }
    print make "\n";
    print make "\t\${Q}\${ARM_STRIP} --output-target=binary -o bin/$test.$type.bin obj/$test.$type.elf";
    print make "\n";
    print make "\n";
    print make "bin/$test.$type.mif: bin/$test.$type.bin\n";
    print make "\t\${Q}\${BIN_TO_MIF} -f bin/$test.$type.bin -o bin/$test.$type.mif\n";
    print make "\t\${Q}\${MIF_TO_CDL} -a 12 -f bin/$test.$type.mif -o bin/$test.$type.cdl\n";
    print make "\n";
    print make "bin/$test.$type.dmif: bin/$test.$type.bin\n";
    print make "\t\${Q}\${BIN_TO_MIF} -f bin/$test.$type.bin -d -o bin/$test.$type.dmif\n";
    print make "\n";
    print make "bin/$test.$type.coe: bin/$test.$type.bin\n";
    print make "\t\${Q}\${BIN_TO_MIF} -c -f bin/$test.$type.bin -o bin/$test.$type.coe\n";
    print make "\n";

}
print make " \n";

close( make );


#a Editor preferences and notes
# Local Variables: ***
# mode: perl ***
# outline-regexp: "#[a!]\\\|#[\t ]*[b-z][\t ]" ***
# End: ***

