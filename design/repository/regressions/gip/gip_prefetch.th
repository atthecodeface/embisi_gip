#a Copyright
#  
#  This file 'rom.th' copyright Gavin J Stark 2003, 2004
#  

#a Documentation
# we take a stimulus file and generate input to the fetch module
# output from the fetch module is compared against that in the stimulus file
# we can drive
#  fetch_16 fetch_op fetch_flush prefetch_op sram_granted
#  prefetch_address
# we can compare
#  fetch_pc
#  fetch_data
#  fetch_data_valid
# The stimulus file has the following format
#  000sfFPS prefaddr     00000DAV fetch_pc fetcdata
#    s->fetch_16
#    f->fetch_flush
#    F->fetch_op
#    P->prefetch_op
#    S->sram_granted
#
#    D->check data matches
#    A->check address matches
#    V->0=>check valid==0, 1=>check valid=1, else ignore valid

#a Main
int stadd
int x
int in_ops
int in_addr
int out_mask
int out_addr
int out_data
int last_out_mask
int last_out_addr
int last_out_data
memory stimulus 1024 32
mem_load stimulus env_string("stimulus_mif") 0
set out_mask 2

#b Header
printf "Simple GIP prefetch test"

#b Reset
reset "test_reset" 1

wait 10

# Drive this/none
drive fetch_16 0
drive fetch_flush 1
drive fetch_op 0
drive prefetch_op 0
drive prefetch_address 0

wait 1

reset "test_reset" 0

wait 5

while 1

#b Read the inputs to drive in the next cycle and the outputs to check then
mem_read in_ops stimulus stadd
add stadd stadd 1
mem_read in_addr stimulus stadd
add stadd stadd 1
mem_read out_mask stimulus stadd
add stadd stadd 1
mem_read out_addr stimulus stadd
add stadd stadd 1
mem_read out_data stimulus stadd
add stadd stadd 1

#b Check the last
and x last_out_mask 0x3
div last_out_mask last_out_mask 16
beq x 2 valid_okay
beq x input("fetch_data_valid") valid_okay
printf "%d0%:Prefetch data valid mismatch got %d1% wanted %d2%" global_cycle() input("fetch_data_valid") x
valid_okay:

and x last_out_mask 0x1
div last_out_mask last_out_mask 16
beq x 0 addr_okay
beq last_out_addr input("fetch_pc") addr_okay
printf "%d0%:Prefetch pc mismatch got %x1% wanted %x2%" global_cycle() input("fetch_pc") last_out_addr
addr_okay:

and x last_out_mask 0x1
div last_out_mask last_out_mask 16
beq x 0 data_okay
beq last_out_data input("fetch_data") data_okay
printf "%d0%:Prefetch data mismatch got %x1% wanted %x2%" global_cycle() input("fetch_data") last_out_data
data_okay:

set last_out_mask out_mask
set last_out_addr out_addr
set last_out_data out_data

#b Drive outputs
and x in_ops 0x1
div in_ops in_ops 16
drive "sram_granted" x

and x in_ops 0x3
div in_ops in_ops 16
drive "prefetch_op" x

and x in_ops 0x3
div in_ops in_ops 16
drive "fetch_op" x

and x in_ops 0x1
div in_ops in_ops 16
drive "fetch_flush" x

and x in_ops 0x1
div in_ops in_ops 16
drive "fetch_16" x

drive "prefetch_address" in_addr

#b Check for done
beq in_addr 0xffffffff test_complete

#b Clock it
wait 1

#b Loop
endwhile

#b End
test_complete:
goto test_pass

#a OLD from here


gosub this_none
wait 3

#b Run some transactions
set address 100
gosub this_new
wait 1

gosub last_seq
wait 1

gosub seq_seq
wait 3

gosub hold_seq
wait 2

gosub seq_seq
wait 1

gosub hold_seq
wait 2

gosub seq_seq
wait 1


set address 202
gosub seq_new
wait 1

gosub hold_seq
wait 1

gosub last_seq
wait 1

gosub hold_seq
wait 1


set address 302
gosub this_new
wait 1

gosub hold_seq
wait 1

gosub last_seq
wait 1

gosub seq_seq
wait 1

gosub seq_hold
wait 10

gosub seq_seq
wait 2

gosub hold_hold
wait 3

gosub hold_seq
wait 2

gosub seq_hold
wait 4

gosub seq_seq
wait 3

gosub seq_hold
wait 2


set address 400
gosub seq_new
wait 1
gosub seq_seq
wait 1
gosub last_seq
wait 1
gosub seq_seq
wait 6
gosub seq_hold
wait 7

set address 502
gosub seq_new
wait 1
gosub seq_hold
wait 1
gosub last_hold
wait 1
gosub seq_hold
wait 4

set address 602
gosub seq_new
wait 1
gosub last_hold
wait 1
gosub seq_hold
wait 7




gosub this_none
wait 1

end

#a Fetch subroutines
#b this_none - this/none
this_none:
drive fetch_op 0
drive prefetch_op 0
drive prefetch_address address
return

#b this_new - this/new
this_new:
drive fetch_op 0
drive prefetch_op 1
drive prefetch_address address
return

#b last_seq
last_seq:
drive fetch_op 1
drive prefetch_op 3
return

#b last_hold
last_hold:
drive fetch_op 1
drive prefetch_op 2
return

#b hold_seq
hold_seq:
drive fetch_op 3
drive prefetch_op 3
return

#b hold_hold
hold_hold:
drive fetch_op 3
drive prefetch_op 2
return

#b seq_seq
seq_seq:
drive fetch_op 2
drive prefetch_op 3
return

#b seq_new
seq_new:
drive fetch_op 2
drive prefetch_op 1
drive prefetch_address address
return

#b seq_hold
seq_hold:
drive fetch_op 2
drive prefetch_op 2
return

#a Pass and fail
test_pass:

pass 0 "Test succeeded"

end

test_fail:
printf "Test failed %d0% %d1%" global_cycle() input("result")
fail global_cycle() "**************************************************************************** Test failed"
end

#a Editor preferences and notes
# Local Variables: ***
# mode: shell-script ***
# outline-regexp: "#[a!]\\\|#[\t ]*[b-z][\t ]" ***
# End: ***

