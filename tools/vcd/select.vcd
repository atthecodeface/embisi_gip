eval '(exit $?0)' && 
  eval 'exec perl -S $0 ${1+"$@"}' && 
  eval 'exec perl -S $0 $argv:q'
  if 0;
# $Id$ 
# Copyright 1999 by John Sheahan <john@reptechnic.com.au>
#
#  This program is free software; you may redistribute and/or modify it under
#  the terms of the GNU General Public License Version 2 as published by the
#  Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY
#  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#  for complete details.
#

# this script is designed to accept a list of signals 
# from the cmd line and ectract them frmm a BIG vcd
# returning a little vcd
$ver='$Id$ ';
require "getopts.pl";
&Getopts("hs:m:");

if ((defined($opt_h)) || (!(defined($opt_s) || defined($opt_m)) )) {
   print "$0 $ver\n";
   print " extract some signals from vcd\n";
   print "  -h  help\n";
   print "  -s signallist (perl regexp)\n";
   print "  -m modulelist (perl regexp)\n";
   print "  no siupport for hierarch in the event of lots of hits\n";
   print "  this is for std vcd - not evcd\n";
   die;
 }

# split up the signals into a list
@signals=split(" ",$opt_s);
@modules=split(" ",$opt_m);


# output the ID stuff
while (<>) {
  print $_;
  last if (/^\$scope /);
}

# read the header writing hierarchy but only good signals
# run through the scopes
while (<>) {
  last if (/^\$enddefinitions /) ;
  if (/^\$scope\s+module\s+(\S+)/) {
    $inmodule=0;
    for ($i=0;$i<@modules;$i++) {
      if ($1 =~ /$modules[$i]/) {
	$inmodule=1;
      }
    }
  }
	
  if (/^\$var /) {
    $siggies++;
    if (/^\$var\s+(wire|reg)\s+\d+\s+(\S+)\s+(.*)\s+\$end$/) {
      $code=$2;
      $name=$3;   # could have whitespace and be buss-y
      if ($inmodule) {
	print;
	$record{$code}=1;
	$hits++;
      }
      else {
	for ($i=0;$i<@signals;$i++) {
	  if ($name =~ /$signals[$i]/) {
	    $record{$code}=1;
	    $hits++;
	    print;
	  }
	}
      }
    }
    else {  
#      print "could not split $_\n";
    }    
  }
  else {
    print $_;
  }
}
 
print ;  # enddefinitions
print STDERR "found $hits name matches in vcd from $siggies signals\n"; 

# now read the tiem / delta section.
# print times only  if these is a signal delta.

$time='';

while (<>) {
  if (/^\#/) { $time=$_; }
  elsif (/^[01xz](.*)$/ || /^b\d+\s(.*)$/ ) {
    if (defined($record{$1})) {
      print $time;
      print ;
      $time='';       # one time if multiple matches
    }
  }
  else {
    print;   # endy stuff?
  }
}
